# -*- coding: utf-8 -*-
"""Homework 5 Pramod.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JLBTO3e7B_PK462Bp54pzNEW-Qm_TDIg
"""



from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

from datetime import timedelta
from datetime import datetime
import snowflake.connector
import requests

def return_snowflake_conn():

    # Initialize the SnowflakeHook
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')

    # Execute the query and fetch results
    conn = hook.get_conn()
    return conn.cursor()

@task
def return_last_90d_price(api_key,symbol):
  """
   - return the last 90 days of the stock prices of symbol as a list of json strings
  """
  url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={api_key}"
  r = requests.get(url)
  data = r.json()

  daily_data = data.get("Time Series (Daily)", {})

  sorted_dates = sorted(daily_data.keys(), reverse=True)

  results = []
  for d in sorted_dates[:90]:
    results.append({
            "date": d,
            **daily_data[d]
        })
  print(f"Fetched {symbol} Stock Prices from the API")
  return results

@task
def load_to_snowflake(records,symbol):
    con = return_snowflake_conn()
    target_table = "raw.MARKET_DATA"
    try:
        con.execute("BEGIN;")
        con.execute(f"""CREATE TABLE IF NOT EXISTS {target_table} (
          	DATE DATE,
            OPEN FLOAT,
            HIGH FLOAT,
            LOW FLOAT,
            CLOSE FLOAT,
            VOLUME NUMBER(38,0),
            SYMBOL VARCHAR,
            PRIMARY KEY (SYMBOL, DATE));""")
        con.execute(f"""DELETE FROM {target_table}""")
        for r in records:
            date = r['date']
            open = r['1. open']
            high = r['2. high']
            low = r['3. low']
            close = r['4. close']
            volume = r['5. volume']
            symbol = symbol
            print('Inserting '+date+' '+open+' '+high+' '+low+' '+close+' '+volume+' '+symbol)
            sql = f"INSERT INTO {target_table} (DATE,OPEN,HIGH,LOW,CLOSE,VOLUME,SYMBOL) VALUES ('{date}', '{open}','{high}','{low}','{close}','{volume}','{symbol}')"
            con.execute(sql)
        con.execute("COMMIT;")
    except Exception as e:
        con.execute("ROLLBACK;")
        print(e)
        raise e

@task
def check_table_stats(table):
    con = return_snowflake_conn()
    result = con.execute(f"SELECT * FROM {table}")
    df = con.fetch_pandas_all()
    print(df.head())
    print(len(df))

with DAG(
    dag_id = 'Stock_price_DAG',
    start_date = datetime(2025,10,6),
    catchup=False,
    tags=['ETL'],
    schedule = '30 2 * * *'
) as dag:
    target_table = "raw.MARKET_DATA"
    symbol = 'KMB'
    key = Variable.get("AlphaVantageAPI")
    data = return_last_90d_price(key,symbol)
    load = load_to_snowflake(data,symbol)
    stats = check_table_stats(target_table)
    data>>load>>stats